= relier Redux aux composants React

*** API
-<Provider>             : composant qui a une référence au store et qui fournit des data aux composants qu'il contient
-connect(...)(comp)     : retourne un wrapper component auquel ont été mappé (injecté) un state et un dispatch aux props
    -mapStateToProps    : fonction qui mappe le state et les props d'un composant, appelée à chaque update du store, des données du state sont passées aux props d'un composant
    -mapDispatchToProps : parcours les actions à dispatcher
    -mergeProps
    -options
-useSelector()          : hook
-useDispatch()          : hook
-useStore()             : hook


*** flux de données
1. lorsqu'un évènement survient, la vue dispatche des actions
2. les reducers interceptent les actions et retournent un objet représentant le nouveau state global
3. le store est mis à jour avec le nouveau state
4. mise à jour des props des composants par appel de mapStateToProps

events vue -> envoie actions -> interception par reducers -> update store -> update props des components cad la vue


*** 2 types de composant
-presentational component = n'utilise pas redux, n'intervient pas avec le state
-containers ou "smart components" ou "stateful components" = components qui communiquent directement avec la partie Redux du code : connect(mapS, mapD)(comp), dispatch des actions, gestion de l'UI


*** code
- /src
    - /actions          => liste des action creators
    - /components       => components dits "stateless", qui n'interviennent pas avec le state
    - /constants        => liste des types d'action
    - /containers       => dispatche les actions, mapStateToProps, mapDispatchToProps, connect()()
    - /reducers         => liste des reducers, combineReducers()
    - index.js          => création du store, <Provider>
    - registerServiceWorker.js


===========================================================================

------------------- index.js - création du store --------------

import { createStore } from 'redux';
import reducer from './Reducers/reducer1'

const store = createStore(reducer)
render( 
    <Provider store={store}>
        <App />
    </Provider>,
    document.getElementById('root')
)

------------------- Store/Reducers/reducers.js - création d'un reducer -------------------

function reducer1 (state, action) {
    let nextState                           // nouveau state
    switch(action.type) {
        case 'ACTION_1':
            nextState = { ...state, value: action.value }
            return nextState
        default: 
            return state
    }
}

------------------- App.js -------------------

const App = () => (
  <div>
    <Comp />
    <Container1 />
  </div>
)

------------------- Containers/Container1.js - connexion du state aux props d'un component -------------------

import { connect } from 'react-redux'

const mapDispatchToProps = (dispatch) => ({ 
    actions: bindActionCreators(TodoActions, dispatch) 
})

const mapStateToProps = (state) => (     // pour que le composant soit informé du changement
    { x : state.x }
)

export default connect(
    mapStateToProps, 
    mapDispatchToProps
)(Component1)               // connexion du state aux props d'un component

------------------- Component/Component1 -  -------------------

const TodoList = ({ todos, toggleTodo }) => (
  <ul>
    {todos.map(todo =>
      <Todo
        key={todo.id}
        {...todo}
        onClick={() => toggleTodo(todo.id)}
      />
    )}
  </ul>
)


App
    Comp
    Container1 -------------------------- Component1
                  connect(mapS, mapD)(Component1)
===========================================================================
