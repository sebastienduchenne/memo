= systèmes de gestion de version distribués, les clients dupliquent tout le dépot
-Git pense ses données plus comme un instantané d’un mini système de fichiers
-À chaque fois que l'on enregistre l’état du projet, Git prend un instantané du contenu de l'espace de travail à ce moment et enregistre une référence à cet instantané. Les fichiers qui n'ont pas changé ne sont pas stockés à nouveau mais référencés

    -> flux d’instantanés

-on peut connaitre toutes les modifications d'un fichier
-empreinte SHA-1 = chaîne de 40 caractères hexadécimaux 
-Git ne fait qu’ajouter des données
-un fichier a 3 états
    modifié : modifié mais non indexé et non validé en base
    indexé : le fichier modifié a été marqué dans sa version actuelle pour qu’il fasse partie du prochain instantané du projet
    validé : les données sont stockées dans la base de données locale

    => non modifié -> modifié -> indexé -> validé


3 sections principales d’un projet Git : 
    -le répertoire Git : endroit où Git stocke les méta-données et la base de données des objets du projet
    -le répertoire de travail : une extraction unique d’une version du projet
    -la zone d’index ou zone de préparation : un fichier qui stocke les informations concernant ce qui fera partie du prochain instantané


2 états d'un fichier : 
    -sous suivi de version : fichiers qui appartenaient déjà au dernier instantané
    -non suivi : tout fichier de la copie de travail qui n’appartenait pas au dernier instantané et n’a pas été indexé

    -> si on index un fichier, puis qu'on le remodifie, il faut le re-indéxer pour que les nouvelles modifs soient validés après commit
