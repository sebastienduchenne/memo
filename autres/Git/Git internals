commandes de "plomberie" (plumbing) : tâches bas niveau
commandes de "porcelaine" (porcelain) : commandes "conviviales"


git init créé un dossier .git contenant :
    HEAD : pointeur vers la branche en cours dans le répertoire de travail 
    config* : options de configuration spécifiques au projet
    description : programme GitWeb
    hooks/ : scripts de procédures automatiques
    info/ : fichier d’exclusions
    objects/ : contenu de la base de données (arbre, blob, commit)
    refs/ : pointeurs vers les objets commit des objects (branches)


commandes de plomberie
    hash-object : prend des données, les stocke dans la .git, puis retourne la clé associée
    commit-tree : créer un objet commit
    cat-file : inspection des objets Git
    update-index : créer un index contenant une entrée
    read-tree
    write-tree
    gc : garbage collect
    reflog
    fsck
    count-objects
    update-ref : créer une étiquette légère
    tag : créer un tag annoté
    verify-pack : voir ce qui a été compacté
    symbolic-ref : éditer le fichier .git/HEAD
    rev-list : trouver un objet
    filter-branch

--------------------------------------------------------------------------------

=====   Les objets de Git   =====

-Git est un système de fichier adressables par contenu, cad que son coeur est une base de paires clé/valeur
-stockage du contenu d'un fichier dans un blob (binary large object)


objets :
    arbre / tree
    blob
    commit
    tag / étiquette


-commande "hash-object" : prend des données, les stocke dans le .git, puis retourne la clé sous laquelle elles sont stockées
-empreinte SHA-1 = une somme de contrôle du contenu du fichier qu'on stocke, plus un en-tête

.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # arbre
.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit


*** arbre / tree

-enregistrer un groupe de fichiers ensemble
-contient une clé d’un blob ou un sous-arbre


$ git cat-file -p master^{tree}
100644 blob a906cb2a4a904a152e80877d4088654daad0c859      README
100644 blob 8f94139338f9404f26296befa88755fc2598c289      Rakefile
040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0      lib


*** objet commit

-contient
    -la clé de l'arbre racine de l’instantané du projet à ce moment
    -l’auteur
    -le validateur
    -une ligne vide
    -le message de validation
-créée avec la commande "git commit-tree"


$ git cat-file -p fdf4fc3
tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579
author xx xx <xx@gmail.com> 1243040974 -0700
committer xx xx <xx@gmail.com> 1243040974 -0700

first commit


--------------------------------------------------------------------------------

=====   Références Git   =====

-référence = fichier qui contient une empreinte SHA-1
-dans .git/refs/
-3 types de références
    -branche, cad fichier pointant vers le commit en tête de branche, dans .git/refs/head
    -étiquette, dans .git/refs/tags
    -références distantes, dans .git/refs/remote

-on met à jour une référence avec la commande "git update-ref"

-une branche est une référence sur le dernier état d’une suite de travaux, cad sur le dernier commit

refs/head/master --> commit 3 --> arbre 3
                        |
                        v
refs/head/test  ---> commit 2 --> arbre 2
                        |
                        v
                     commit 1 --> arbre 1


*** la branche HEAD

.git/HEAD = fichier qui contient une référence symbolique à la branche courante, il contient un pointeur vers une autre référence


$ cat .git/HEAD
ref: refs/heads/master

-commande "git symbolic-ref" pour éditer ce fichier


*** étiquette / tag

= pointe en général vers un commit plutôt qu’un arbre, mais elle pointe toujours vers le même commit
-est un objet git
-dans .git/refs/tags/

contient :
    -un étiqueteur
    -une date
    -un message
    -un pointeur vers un commit

on créé un étiquette avec la commande git update-ref
-> .git/refs/tags/v1.1


*** Références distantes / remotes

= références vers les dépots distants
-présentes dans /refs/remotes
-origin master : refs/remotes/origin/master


--------------------------------------------------------------------------------

=====   Fichiers groupés   =====

-Git compresse le contenu de ces fichiers avec zlib
-si on fait un commit un fichier, il sera enregistré dans un blob. Si on le modifie et qu'on le recommit, il sera enregistré dans un autre blob
-Le format initial dans lequel Git enregistre les objets est appelé le format brut (loose object)
-Git compacte plusieurs de ces objets en un seul fichier binaire appelé packfile (fichier groupé) suand :
    -quand il y a trop d’objets au format brut
    -si l’on exécute manuellement "git gc"
    -quand on pousse vers un serveur distant

-le groupement crée :
    -un fichier unique, rassemblant le contenu de tous les objets venant d’être supprimés du système de fichier, 
    -et un index : contenant les emplacements dans le fichier groupé

-Quand Git compacte des objets, il recherche les fichiers qui ont des noms et des tailles similaires, puis enregistre seulement les deltas entre une version du fichier et la suivante

git verify-pack : voir ce qui a été compacté

--------------------------------------------------------------------------------
=====   refspec   =====

= configurer les transferts de références distantes et locales avec le dépots distant
-dans .git/config
-format : +<src>:<dst>


pousser des refspec : $ git push origin master:refs/heads/xxx/master
supprimer des références sur le serveur distant : $ git push origin --delete topic
--------------------------------------------------------------------------------

=====   protocoles de transfert   =====

-transférer des données entre deux dépôts avec le protocole stupide ou le protocole intelligent

*** protocole stupide
= ne nécessite aucun code spécifique à Git côté serveur durant le transfert
-> déconseillé


*** protocole intelligent

= nécessite l’exécution sur le serveur d’un processus qui connaît Git, il peut lire les données locales et déterminer ce que le client a ou ce dont il a besoin pour générer un fichier groupé personnalisé pour lui

--------------------------------------------------------------------------------

=====   Maintenance et récupération de données   =====

*** Maintenance

quand trop d’objets bruts ou trop de fichiers groupés => lancement de git gc, cela :
    -rassemble plusieurs objets bruts et les place dans des fichiers groupés, 
    -rassemble des fichiers groupés en un gros fichier groupé,
    -supprime des objets qui ne sont plus accessibles depuis aucun commit et qui sont vieux de plusieurs mois


*** récupération de données


*** Suppression d’objets



--------------------------------------------------------------------------------

=====   variables d’environnement   =====

GIT_EXEC_PATH
HOME

