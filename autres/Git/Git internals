commandes de "plomberie" (plumbing) : tâches bas niveau
commande de "porcelaine" (porcelain) : conviviales


git init créé un dossier .git contenant :
    HEAD : pointeur vers la branche en cours dans le répertoire de travail 
    config* : options de configuration spécifiques au projet
    description : programme GitWeb
    hooks/ : scripts de procédures automatiques
    info/ : fichier d’exclusions
    objects/ : contenu de la base de données (arbre, blob, commit)
    refs/ : pointeurs vers les objets commit des objects (branches)


commandes de plomberie
    hash-object : prend des données, les stocke dans la .git, puis retourne la clé associée
    commit-tree : créer un objet commit
    cat-file : inspection des objets Git
    update-index : créer un index contenant une entrée
    read-tree
    write-tree
    gc : garbage collect
    reflog
    fsck
    count-objects
    update-ref : mettre à jour une référence
    verify-pack : voir ce qui a été compacté


--------------------------------------------------------------------------------

=====   Les objets de Git   =====

-Git est un système de fichier adressables par contenu, cad que son coeur est une base de paires clé/valeur
-stockage du contenu d'un fichier dans un blob (binary large object)


objets :
    arbre / tree
    blob
    commit
    tag / étiquette


-commande "hash-object" : prend des données, les stocke dans le .git, puis retourne la clé sous laquelle elles sont stockées
-empreinte SHA-1 = une somme de contrôle du contenu du fichier qu'on stocke, plus un en-tête

.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # arbre
.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit


*** arbre

-enregistrer un groupe de fichiers ensemble
-contient une clé d’un blob ou un sous-arbre


$ git cat-file -p master^{tree}
100644 blob a906cb2a4a904a152e80877d4088654daad0c859      README
100644 blob 8f94139338f9404f26296befa88755fc2598c289      Rakefile
040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0      lib


*** objet commit

-contient
    -la clé de l'arbre racine de l’instantané du projet à ce moment
    -l’auteur
    -le validateur
    -une ligne vide
    -le message de validation
-créée avec commit-tree


$ git cat-file -p fdf4fc3
tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579
author xx xx <xx@gmail.com> 1243040974 -0700
committer xx xx <xx@gmail.com> 1243040974 -0700

first commit


--------------------------------------------------------------------------------

=====   Références Git   =====

-référence = clé ou empreinte SHA-1
-on trouve les fichiers contenant des empreintes SHA-1 dans refs/
-3 types de références
    -références distantes
    -étiquette

HEAD = fichier qui contient une référence symbolique à la branche courante


*** étiquette / tag

= pointe en général vers un commit plutôt qu’un arbre, mais elle pointe toujours vers le même commit

contient :
    -un étiqueteur
    -une date
    -un message
    -un pointeur vers un commit

on créé un étiquette avec la commande git update-ref


*** Références distantes / remotes



--------------------------------------------------------------------------------

=====   Fichiers groupés   =====

-Git compresse le contenu de ces fichiers avec zlib
-si on fait un commit un fichier, il sera enregistré dans un blob. Si on le modifie et qu'on le recommit, il sera enregistré dans un autre blob
-Le format initial dans lequel Git enregistre les objets est appelé le format brut (loose object)
-Git compacte plusieurs de ces objets en un seul fichier binaire appelé packfile (fichier groupé) suand :
    -quand il y a trop d’objets au format brut
    -si l’on exécute manuellement "git gc"
    -quand on pousse vers un serveur distant

-le groupement crée :
    -un fichier unique, rassemblant le contenu de tous les objets venant d’être supprimés du système de fichier, 
    -et un index : contenant les emplacements dans le fichier groupé

-Quand Git compacte des objets, il recherche les fichiers qui ont des noms et des tailles similaires, puis enregistre seulement les deltas entre une version du fichier et la suivante

git verify-pack : voir ce qui a été compacté

--------------------------------------------------------------------------------
=====   refspec   =====


--------------------------------------------------------------------------------

=====   protocoles de transfert   =====

stupide
intelligent


--------------------------------------------------------------------------------

=====   Maintenance et récupération de données   =====


--------------------------------------------------------------------------------

=====   variables d’environnement   =====

GIT_EXEC_PATH
HOME

