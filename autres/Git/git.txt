= Gestionnaire de version (VCS) décentralisé
-5 espaces :
    remise
    espace de travail
    index
    dépôt local dans le .git
    dépôt distant sur le serveur
-Origin : racine du dépôt distant sur laquelle se trouve les différentes branches
-Master : branche principal sur le dépôt distant
-.gitignore : dossier et fichier à ignorer
-index : fichier qui contient un instantané du contenu de la copie de travail et sera utilisé comme contenu du prochain commit
-quand on est sur la branche de travail, tirer la develop (source de vérité ultime) régulièrement pour éviter les conflits et d'avoir à rebase quand on push
-un linter dans le pipeline check les fichiers et fail si problème de linter
-linter :  
    -sert à vérifier que le code est conforme à des règles de bonnes pratiques
    -A exécuter avant chaque commit puis corriger les mauvaises pratiques
    -'--fix' : fix automatiquement
    -‘--no-verify’ quand on push et qu’on ne veut pas qu’il y ait de vérification
-alias
    git config --global alias.ci commit => git ci


*** Configurer git

dans 3 endroits différents :
    /etc/gitconfig : pour tous les utilisateurs et tous les dépôts du système
    ~/.gitconfig : spécifique à votre utilisateur
    .git/config : spécifique au seul dépôt en cours, contient les alias, le code couleur et les données utilisateur

-> chaque niveau surcharge le niveau précédent

éditer email : git config --global user.email "email@exemple.com"
éditer nom   : git config --global user.name "name"
éditer éditeur : git config --global core.editor emacs

lister : git config --list


*** résumé
git status : voir l'état des fichiers
git commit
git merge
git push
git diff
git log
git config
git tag
git blame
git checkout
git remote
git revert
git fetch
git pull
git branch
git init
git clone
git reset
git stash
git show
git rebase
git add : ajouter des fichiers pour la prochaine validation
alias
index
remise

-----------------------------------------------------------
-systèmes de gestion de version distribués, les clients dupliquent tout le dépot
-Git pense ses données plus comme un instantané d’un mini système de fichiers
-À chaque fois que l'on enregistre l’état du projet, Git prend un instantané du contenu de l'espace de travail à ce moment et enregistre une référence à cet instantané. Les fichiers qui n'ont pas changé ne sont pas stockés à nouveau mais référencés

    -> flux d’instantanés

-on peut connaitre toutes les modifications d'un fichier
-empreinte SHA-1 = chaîne de 40 caractères hexadécimaux 
-Git ne fait qu’ajouter des données
-un fichier a 3 états
    modifié : modifié mais non indexé et non validé en base
    indexé : le fichier modifié a été marqué dans sa version actuelle pour qu’il fasse partie du prochain instantané du projet
    validé : les données sont stockées dans la base de données locale

3 sections principales d’un projet Git : 
    -le répertoire Git : endroit où Git stocke les méta-données et la base de données des objets du projet
    -le répertoire de travail : une extraction unique d’une version du projet
    -la zone d’index ou zone de préparation : un simple fichier qui stocke les informations concernant ce qui fera partie du prochain instantané

2 états d'un fichier : 
    -sous suivi de version : fichiers qui appartenaient déjà au dernier instantané
    -non suivi : tout fichier de la copie de travail qui n’appartenait pas au dernier instantané et n’a pas été indexé


